# .github/workflows/sync-upstream-merge.yml
name: ü§ñ Keep Fork Updated (Merge) & Create Conflict Resolution PR

on:
  schedule:
    # Runs daily at 03:00 UTC (adjust as needed)
    - cron: '0 3 * * *'
  workflow_dispatch: # Allows manual triggering from the Actions tab

permissions:
  contents: write      # Needed for checkout (PAT), push, commit changes by action
  pull-requests: write # Needed for peter-evans/create-pull-request

jobs:
  sync:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        # Define the branches in your fork to sync with upstream
        branch: [development, master] # Sync both branches using merge strategy

    steps:
      # Step 1: Checkout the repository branch using PAT
      - name: Checkout ${{ matrix.branch }}
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Need full history for merge
          ref: ${{ matrix.branch }}
          token: ${{ secrets.ACTIONS_WORKFLOW_PAT }} # Use PAT for authentication

      # Step 2: Add Upstream remote and fetch necessary refs
      - name: Add Upstream and Fetch
        run: |
          git remote add upstream https://github.com/yubiuser/librespot-shairport-snapserver.git || true
          echo "Fetching upstream/${{ matrix.branch }} and origin/${{ matrix.branch }}..."
          git fetch upstream ${{ matrix.branch }}
          git fetch origin ${{ matrix.branch }} # Fetch origin to ensure local branch is reset correctly

      # Step 3: Configure Git user identity
      - name: Configure Git user
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "GitHub Actions"

      # Step 4: Attempt the Merge
      - name: Attempt Merge of upstream/${{ matrix.branch }} into ${{ matrix.branch }}
        id: merge_attempt
        continue-on-error: true # Allow workflow to continue if merge fails (conflicts)
        run: |
          echo "Attempting merge of upstream/${{ matrix.branch }} into ${{ matrix.branch }}"
          git checkout ${{ matrix.branch }}
          # Ensure we start from the state pushed to origin
          echo "Resetting local ${{ matrix.branch }} to origin/${{ matrix.branch }} state..."
          git reset --hard origin/${{ matrix.branch }}

          # Check if already up-to-date
          if git merge-base --is-ancestral upstream/${{ matrix.branch }} HEAD; then
             echo "‚úÖ Branch '${{ matrix.branch }}' is already up-to-date or ahead of upstream/${{ matrix.branch }}. No merge needed."
             echo "outcome=success" >> $GITHUB_OUTPUT
             exit 0
          fi

          # Perform the merge - This respects .gitattributes merge=ours for .github/**
          # The merge commit is created automatically if successful without conflicts
          echo "Performing merge..."
          git merge --no-edit upstream/${{ matrix.branch }} -m "Merge upstream/${{ matrix.branch }} into ${{ matrix.branch }}"
          MERGE_EXIT_CODE=$?

          if [ $MERGE_EXIT_CODE -ne 0 ]; then
             echo "::error::Merge command failed with exit code $MERGE_EXIT_CODE. Conflicts likely."
             echo "Aborting failed merge attempt..."
             # Attempt to abort, ignore errors if already aborted or not in merge state
             git merge --abort || echo "Merge already aborted or not in progress."
             echo "outcome=failure" >> $GITHUB_OUTPUT # Set failure outcome
             exit 1 # Exit with non-zero to signal failure
          else
             echo "Merge successful."
             echo "outcome=success" >> $GITHUB_OUTPUT # Set success outcome
             exit 0 # Exit with zero for success
          fi

      # Step 5: Push if Merge Succeeded (NO FORCE NEEDED)
      - name: Push merged branch if merge was successful
        if: steps.merge_attempt.outputs.outcome == 'success'
        run: |
          echo "‚úÖ Merge successful for ${{ matrix.branch }}. Pushing branch."
          # PAT context from checkout should be used. No force push needed for merge commits.
          git push origin ${{ matrix.branch }}

      # --- Conflict Handling Steps ---

      # Step 6: Prepare the conflict state in WORKSPACE for PR Action (NO COMMIT, NO ADD)
      - name: üõ†Ô∏è Prepare Conflict State for PR Action
        # Run only if the merge attempt step failed
        if: steps.merge_attempt.outputs.outcome == 'failure'
        id: prep_conflict
        run: |
          echo "Merge attempt failed for ${{ matrix.branch }}. Preparing conflict state..."

          # Rigorous Cleanup & Reset to Base State
          echo "Attempting rigorous cleanup..."
          # No rebase to abort here, merge was already aborted in previous step or handled by git itself
          rm -rf .git/REBASE_HEAD .git/rebase-apply .git/rebase-merge .git/MERGE_HEAD .git/MERGE_MSG .git/MERGE_MODE .git/sequencer || echo "State files cleaned/absent."
          echo "Checking out base branch: ${{ matrix.branch }}"
          git checkout ${{ matrix.branch }} # Checkout base branch
          echo "Resetting base branch '${{ matrix.branch }}' to origin/${{ matrix.branch }} state..."
          git reset --hard origin/${{ matrix.branch }} # Reset to origin state
          echo "Cleaning working directory..."
          git clean -fdx # Clean untracked files

          # Attempt the merge AGAIN, but without committing, to leave conflicts for the PR action
          echo "Re-attempting merge of upstream/${{ matrix.branch }} into current branch (${{ matrix.branch }}) WITHOUT commit to generate conflict state..."
          git merge --no-commit --no-ff upstream/${{ matrix.branch }} || echo "Merge command failed as expected (exit code $?). Conflict state generated."

          # --- Capture list of files with conflicts ---
          echo "Identifying conflicted files..."
          # Get files listed with U (Unmerged) in any column by git status --short
          CONFLICTING_FILES_LIST=$(git status --short | grep '^.U\|U.' | sed 's/^...//')
          if [ -z "$CONFLICTING_FILES_LIST" ]; then
             # Add checks for other merge failure reasons
             if git merge-base --is-ancestral HEAD upstream/${{ matrix.branch }}; then
                CONFLICTING_FILES_LIST="Merge failed, but no standard conflict markers found. Check 'git status' manually."
             else
                CONFLICTING_FILES_LIST="Failed merge likely due to unrelated histories. Check 'git status' manually."
             fi
          fi
          printf "CONFLICTING_FILES<<EOF\n%s\nEOF\n" "$CONFLICTING_FILES_LIST" >> $GITHUB_ENV
          echo "Detected Conflicted Files (will be listed in PR):"
          echo "$CONFLICTING_FILES_LIST" # Log the raw list for debugging
          # --- End Capture ---

          # Define the target branch name for the action via ENV variable
          CONFLICT_BRANCH="conflict-resolution/${{ matrix.branch }}-$(date +%s)"
          echo "CONFLICT_BRANCH=$CONFLICT_BRANCH" >> $GITHUB_ENV
          echo "Target conflict branch name set to: $CONFLICT_BRANCH"

          echo "Workspace prepared with UNSTAGED conflicts ON branch '${{ matrix.branch }}'."
          echo "The action will stage changes, create the branch '$CONFLICT_BRANCH', commit, and push."

      # Step 7: Create the Pull Request using peter-evans/create-pull-request
      - name: üö® Create Conflict Resolution PR
        if: steps.merge_attempt.outputs.outcome == 'failure'
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.ACTIONS_WORKFLOW_PAT }}
          # Action will stage and commit changes from the workspace
          commit-message: "‚úÖ Resolved upstream merge conflict in ${{ matrix.branch }}"
          committer: GitHub Actions <41898282+github-actions[bot]@users.noreply.github.com>
          author: GitHub Actions <41898282+github-actions[bot]@users.noreply.github.com>
          # The action will CREATE this branch from the current workspace state
          branch: ${{ env.CONFLICT_BRANCH }}
          # The target branch for the pull request
          base: ${{ matrix.branch }}
          title: "üöß Conflict: Resolve upstream merge for ${{ matrix.branch }}"
          # PR Body includes the captured list of conflicted files - adjusted for merge context
          body: |
            **Merge Conflict Resolution Required**

            The automated merge of `${{ matrix.branch }}` with `upstream/${{ matrix.branch }}` failed due to conflicts.

            This branch (`${{ env.CONFLICT_BRANCH }}`) was created by attempting the merge and committing the result, **including any conflicts**. Please resolve them directly in this branch.

            **Note on `.github/` directory (for `master` branch):** If your `.gitattributes` file correctly specifies `merge=ours` for `.github/**`, conflicts within this directory should have been automatically resolved in favour of your version during the initial merge attempt. If conflicts *still* appear in `.github/` files in this PR, please double-check your `.gitattributes` configuration on the `${{ matrix.branch }}` branch.

            **Conflicted Files Detected by Workflow:**
            ```
            ${{ env.CONFLICTING_FILES }}
            ```
            *(Please verify with `git status` after checking out the branch locally or opening in Codespaces)*

            [![Open in GitHub Codespaces](https://github.com/codespaces/badge.svg)](https://github.com/codespaces/new?repo=${{ github.repository }}&ref=${{ env.CONFLICT_BRANCH }})

            **Resolution Instructions:**
            1. Check out this branch (`${{ env.CONFLICT_BRANCH }}`) locally or open in Codespaces.
            2. Run `git status` to confirm unmerged paths (files listed above).
            3. Resolve the merge conflicts in the listed files (look for `<<<<<<<`, `=======`, `>>>>>>>` or handle modify/delete).
            4. Stage the resolved files (`git add .`).
            5. Amend the commit created by this action (`git commit --amend --no-edit`).
            6. Push the corrected branch (normal push, no force needed ideally unless amending history: `git push origin ${{ env.CONFLICT_BRANCH }}`).
            7. Once the PR checks pass, **merge this Pull Request** into `${{ matrix.branch }}`.
          # Ensure the action deletes the source branch after merging the PR
          delete-branch: true

      # Step 8: Log if skipped (Placeholder - Kept for potential future use)
      # - name: Log Skipped Status
      #   if: steps.merge_attempt.outcome == 'success' && <condition_if_no_merge_needed>
      #   run: |
      #     echo "üöÄ Branch ${{ matrix.branch }} was already in sync. No merge performed."