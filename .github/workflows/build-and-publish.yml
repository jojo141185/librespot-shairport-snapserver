# .github/workflows/build-and-publish.yml
name: Build and Publish Docker Images

on:
  workflow_dispatch:            # manual trigger
  release:
    types: [published]          # on new release publish
  pull_request:
    types: [opened, synchronize, reopened]  # build/test PR branches only
  push:
    branches:
      - latest                  # push to latest branch
    tags:
      - 'v*.*.*'                 # push of version tags (e.g., v1.2.3)

env:
  # Base image name in the registry (ghcr.io/owner/repo)
  REGISTRY_IMAGE: ghcr.io/${{ github.repository }}
  # Determine if images/manifests should actually be pushed to the registry
  # This is still useful INSIDE steps, just not in job 'if' conditions.
  SHOULD_PUSH: ${{ github.event_name != 'pull_request' }}

# Define permissions required for the workflow at the top level
permissions:
  contents: read      # To checkout the code
  packages: write     # To push docker images and manifests to GHCR

jobs:
  build:
    # Dynamic job name based on matrix values
    name: Build ${{ matrix.suffix }} on ${{ matrix.platform }}
    runs-on: ubuntu-latest
    # Permissions for this specific job (inherits from top level)
    permissions:
      contents: read
      packages: write

    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: linux/amd64
            dockerfile: alpine.dockerfile
            #suffix: -alpine
          - platform: linux/arm64
            dockerfile: alpine.dockerfile
            #suffix: -alpine

    steps:
      - name: Checkout code
        uses: actions/checkout@v4.2.0
        with:
          fetch-depth: 0 # Required for Git-based tags in metadata-action
          ref: ${{ github.head_ref }}

      - name: Prepare IDs and names
        id: prep
        run: |
          p=$(echo "${{ matrix.platform }}" | tr '/.' '-')
          f=$(basename "${{ matrix.dockerfile }}" .dockerfile)
          pair="${p}-${f}"
          echo "PAIR=${pair}" >> $GITHUB_ENV
          img="${{ env.REGISTRY_IMAGE }}${{ matrix.suffix }}"
          echo "IMAGE=${img}" >> $GITHUB_ENV
          echo "pair=${pair}" >> $GITHUB_OUTPUT
          echo "image=${img}" >> $GITHUB_OUTPUT
        shell: bash

      - name: Set up QEMU for multi-platform builds
        uses: docker/setup-qemu-action@v3.2.0

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3.6.1

      - name: Extract metadata for ${{ steps.prep.outputs.image }}
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.prep.outputs.image }}
          tags: |
            # === Event-specific tags ===
            # Push to branch: tag with branch name (requires event=branch)
            type=ref,event=branch,pattern={{branch}},enable=${{ github.event_name == 'push' && github.ref_type == 'branch' }}
            # Push of a tag: tag with the Git tag (requires event=tag)
            type=ref,event=tag,pattern={{tag}},enable=${{ github.event_name == 'push' && github.ref_type == 'tag' }}
            # Pull Request: tag with pr-NUMBER (requires event=pr)
            type=ref,event=pr,enable=${{ github.event_name == 'pull_request' }}
            # Release: tag with semver based on release tag
            type=semver,pattern={{version}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}},enable=${{ github.event_name == 'release' }}
            # === General tags (only when pushing) ===
            # Tag actual pushes/releases/dispatches with the short commit SHA
            type=sha,enable=${{ env.SHOULD_PUSH == 'true' }}
        env:
          # Optional: Set custom length for short SHA tags generated by type=sha
          DOCKER_METADATA_SHORT_SHA_LENGTH: 12

      - name: Log in to GitHub Container Registry (ghcr.io)
        if: env.SHOULD_PUSH == 'true'
        uses: docker/login-action@v3.3.0
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push ${{ matrix.dockerfile }} for ${{ matrix.platform }}
        id: build
        uses: docker/build-push-action@v6.8.0
        with:
          context: .
          file: ./${{ matrix.dockerfile }}
          platforms: ${{ matrix.platform }}
          cache-from: type=gha,scope=${{ matrix.dockerfile }}
          cache-to: type=gha,scope=${{ matrix.dockerfile }},mode=max
          labels: ${{ steps.meta.outputs.labels }}
          tags: ${{ steps.meta.outputs.tags }}
          push: ${{ env.SHOULD_PUSH == 'true' }}
          outputs: type=image,name=${{ steps.prep.outputs.image }}

      # --- Steps for Manifest Job Preparation (only if pushing) ---
      - name: Prepare image info artifact content
        if: env.SHOULD_PUSH == 'true'
        run: |
          mkdir -p artifacts
          echo "${{ steps.prep.outputs.image }}@${{ steps.build.outputs.digest }}" > artifacts/${{ env.PAIR }}.txt
          echo "Prepared artifact content for ${{ env.PAIR }}: $(cat artifacts/${{ env.PAIR }}.txt)"
        shell: bash

      - name: Upload image info artifact for manifest job
        if: env.SHOULD_PUSH == 'true'
        uses: actions/upload-artifact@v4.4.0
        with:
          name: image-info-${{ env.PAIR }}
          path: artifacts/${{ env.PAIR }}.txt
          if-no-files-found: error
          retention-days: 1

  manifest:
    name: Build and Push Multi-Arch Manifest
    needs: build
    runs-on: ubuntu-latest
    # Condition: All builds successful, AND the triggering event is NOT pull_request, AND not dependabot
    if: |
      needs.build.result == 'success'
      && github.event_name != 'pull_request'
      && github.actor != 'dependabot[bot]'
    # Permissions required for this job
    permissions:
      contents: read
      packages: write

    steps:
      - name: Download all image info artifacts
        uses: actions/download-artifact@v4
        with:
          pattern: image-info-*
          path: digest-files
          merge-multiple: true

      - name: Aggregate digests from artifacts
        id: agg
        run: |
          refs=""
          echo "Looking for digest files in digest-files/ ..."
          ls -l digest-files/
          for f in digest-files/*.txt; do
            if [ -f "$f" ]; then
              content=$(<"$f")
              echo "Read from $f: $content"
              refs="$refs $content"
            else
              echo "Warning: Expected file $f not found or not a regular file."
            fi
          done
          refs=$(echo "$refs" | xargs)
          if [ -z "$refs" ]; then
            echo "::error::No image references found in downloaded artifacts."
            exit 1
          fi
          echo "refs=${refs}" >> $GITHUB_OUTPUT
          echo "Aggregated References: $refs"
        shell: bash

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Extract manifest tags (for base image)
        id: meta-manifest
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY_IMAGE }} # Use the base image name WITHOUT suffix
          tags: |
            # === Event-specific tags for the MANIFEST ===
            # Push to branch: tag manifest with branch name (requires event=branch)
            type=ref,event=branch,pattern={{branch}},enable=${{ github.event_name == 'push' && github.ref_type == 'branch' }}
            # Push of a tag OR Release event: tag manifest with Git tag/release tag (requires event=tag)
            # Note: A release event implicitly involves a tag.
            type=ref,event=tag,pattern={{tag}},enable=${{ (github.event_name == 'push' && github.ref_type == 'tag') || github.event_name == 'release' }}
            # Release event: tag manifest with semver
            type=semver,pattern={{version}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}}.{{minor}},enable=${{ github.event_name == 'release' }}
            type=semver,pattern={{major}},enable=${{ github.event_name == 'release' }}
            # Tag master branch push OR any tag/release as 'latest'
            type=raw,value=latest,enable=${{ github.ref_name == 'master' || github.ref_type == 'tag' || github.event_name == 'release' }}
            # Tag workflow_dispatch runs with SHA
            type=sha,enable=${{ github.event_name == 'workflow_dispatch' }}

      - name: Log in to GitHub Container Registry (ghcr.io)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Create and push manifest list
        run: |
          REFS="${{ steps.agg.outputs.refs }}"
          TAG_OPTS=$(echo '${{ steps.meta-manifest.outputs.json }}' | jq -r '.tags | map("-t "+.) | join(" ")')
          if [ -z "$REFS" ]; then
              echo "::error::No image references provided. Manifest creation skipped."
              exit 1
          fi
          if [ -z "$TAG_OPTS" ] || [ "$TAG_OPTS" == "null" ]; then
              echo "Warning: No manifest tags generated by metadata action for this event (${{ github.event_name }} / ${{ github.ref_type }}). Skipping manifest push."
              exit 0
          fi
          echo "Creating manifest list for ${{ env.REGISTRY_IMAGE }} with tags: ${TAG_OPTS}"
          echo "Using image references: ${REFS}"
          docker buildx imagetools create ${TAG_OPTS} ${REFS}
        shell: bash

      - name: Inspect manifest (optional verification)
        if: always() && steps.agg.outputs.refs != ''
        run: |
          PRIMARY_TAG=$(echo '${{ steps.meta-manifest.outputs.json }}' | jq -r '.tags[0]')
          if [ -n "$PRIMARY_TAG" ] && [ "$PRIMARY_TAG" != "null" ]; then
            echo "Inspecting manifest tag: ${PRIMARY_TAG}"
            docker buildx imagetools inspect "${PRIMARY_TAG}" || echo "Inspection failed for tag ${PRIMARY_TAG} (might not have been pushed or tag is invalid)."
          else
             echo "No primary tag was generated for inspection for this event."
          fi
        shell: bash